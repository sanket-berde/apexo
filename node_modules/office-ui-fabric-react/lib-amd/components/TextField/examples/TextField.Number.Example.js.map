{"version":3,"file":"TextField.Number.Example.js","sourceRoot":"../src/","sources":["components/TextField/examples/TextField.Number.Example.tsx"],"names":[],"mappings":";;;IAcA;;OAEG;IACH;QAA8B,2CAA6D;QAGzF,yBAAY,KAA4B;YAAxC,YACE,kBAAM,KAAK,CAAC,SAKb;YARO,gBAAU,GAAG,KAAK,CAAC,SAAS,EAAc,CAAC;YA4B3C,qBAAe,GAAG,UAAC,KAAa;gBACtC,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,6CAA2C,KAAK,MAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YACzF,CAAC,CAAC;YAEM,eAAS,GAAG,UAAC,EAA2D,EAAE,KAAa;gBAC7F,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;YAC3B,CAAC,CAAC;YAEM,cAAQ,GAAG;gBACjB,KAAI,CAAC,QAAQ,CACX;oBACE,KAAK,EAAE,KAAI,CAAC,KAAK,CAAC,YAAY;iBAC/B,EACD;oBACE,IAAI,KAAI,CAAC,UAAU,IAAI,KAAI,CAAC,UAAU,CAAC,OAAO,EAAE;wBAC9C,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;qBACjC;gBACH,CAAC,CACF,CAAC;YACJ,CAAC,CAAC;YA1CA,KAAI,CAAC,KAAK,GAAG;gBACX,KAAK,EAAE,KAAK,CAAC,YAAY;aAC1B,CAAC;;QACJ,CAAC;QAEM,gCAAM,GAAb;YACE,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB;gBAC9B,oBAAC,qBAAS,IACR,SAAS,EAAC,2BAA2B,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EACvB,QAAQ,EAAE,IAAI,CAAC,SAAS,EACxB,iBAAiB,EAAE,IAAI,CAAC,eAAe,EACvC,YAAY,EAAE,IAAI,CAAC,UAAU,GAC7B;gBACF,6BAAK,SAAS,EAAC,+BAA+B;oBAC5C,oBAAC,sBAAa,IAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,cAAyB,CAC1D,CACF,CACP,CAAC;QACJ,CAAC;QAsBH,sBAAC;IAAD,CAAC,AAjDD,CAA8B,KAAK,CAAC,SAAS,GAiD5C;IAEY,QAAA,sBAAsB,GAA6B;QAC9D,OAAO,CACL,oBAAC,aAAK,IAAC,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,GAAG;YAC3B,oBAAC,eAAe,IAAC,KAAK,EAAC,2CAA2C,EAAC,YAAY,EAAC,KAAK,GAAG;YACxF,oBAAC,eAAe,IAAC,KAAK,EAAC,6CAA6C,EAAC,YAAY,EAAC,cAAc,GAAG,CAC7F,CACT,CAAC;IACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { TextField, ITextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Stack } from 'office-ui-fabric-react/lib/Stack';\r\n\r\ninterface INumberTextFieldProps {\r\n  label: string;\r\n  initialValue: string;\r\n}\r\n\r\ninterface INumberTextFieldState {\r\n  value: string;\r\n}\r\n\r\n/**\r\n * Custom extension of TextField which only accepts numbers as valid values.\r\n */\r\nclass NumberTextField extends React.Component<INumberTextFieldProps, INumberTextFieldState> {\r\n  private _textField = React.createRef<ITextField>();\r\n\r\n  constructor(props: INumberTextFieldProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      value: props.initialValue\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className=\"NumberTextField\">\r\n        <TextField\r\n          className=\"NumberTextField-textField\"\r\n          label={this.props.label}\r\n          value={this.state.value}\r\n          onChange={this._onChange}\r\n          onGetErrorMessage={this._validateNumber}\r\n          componentRef={this._textField}\r\n        />\r\n        <div className=\"NumberTextField-restoreButton\">\r\n          <DefaultButton onClick={this._restore}>Restore</DefaultButton>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _validateNumber = (value: string): string => {\r\n    return isNaN(Number(value)) ? `The value should be a number, actual is ${value}.` : '';\r\n  };\r\n\r\n  private _onChange = (ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, value: string): void => {\r\n    this.setState({ value });\r\n  };\r\n\r\n  private _restore = (): void => {\r\n    this.setState(\r\n      {\r\n        value: this.props.initialValue\r\n      },\r\n      () => {\r\n        if (this._textField && this._textField.current) {\r\n          this._textField.current.focus();\r\n        }\r\n      }\r\n    );\r\n  };\r\n}\r\n\r\nexport const NumberTextFieldExample: React.StatelessComponent = () => {\r\n  return (\r\n    <Stack gap={15} maxWidth={300}>\r\n      <NumberTextField label=\"Number TextField with valid initial value\" initialValue=\"100\" />\r\n      <NumberTextField label=\"Number TextField with invalid initial value\" initialValue=\"Not a number\" />\r\n    </Stack>\r\n  );\r\n};\r\n"]}