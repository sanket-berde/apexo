{"version":3,"file":"cssColor.js","sourceRoot":"../src/","sources":["utilities/color/cssColor.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRGB } from './interfaces';\r\nimport { MAX_COLOR_ALPHA } from './consts';\r\nimport { COLOR_VALUES } from './colorValues';\r\nimport { hsl2rgb } from './hsl2rgb';\r\n\r\n/**\r\n * Converts a valid CSS color string to an RGB color.\r\n * Note that hex colors *must* be prefixed with # to be considered valid.\r\n * Alpha in returned color defaults to 100.\r\n */\r\nexport function cssColor(color: string): IRGB | undefined {\r\n  if (!color) {\r\n    return undefined;\r\n  }\r\n  return _named(color) || _hex3(color) || _hex6(color) || _rgba(color) || _hsla(color);\r\n}\r\n\r\n/**\r\n * If `str` is a valid HTML color name, returns an RGB color (with alpha 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _named(str: string): IRGB | undefined {\r\n  const c = (COLOR_VALUES as any)[str.toLowerCase()];\r\n\r\n  if (c) {\r\n    return {\r\n      r: c[0],\r\n      g: c[1],\r\n      b: c[2],\r\n      a: MAX_COLOR_ALPHA\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in valid `rgb()` or `rgba()` format, returns an RGB color (alpha defaults to 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _rgba(str: string): IRGB | undefined {\r\n  const match = str.match(/^rgb(a?)\\(([\\d., ]+)\\)$/);\r\n  if (match) {\r\n    const hasAlpha = !!match[1];\r\n    const expectedPartCount = hasAlpha ? 4 : 3;\r\n    const parts = match[2].split(/ *, */).map(Number);\r\n\r\n    if (parts.length === expectedPartCount) {\r\n      return {\r\n        r: parts[0],\r\n        g: parts[1],\r\n        b: parts[2],\r\n        a: hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in valid 6-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _hex6(str: string): IRGB | undefined {\r\n  if ('#' === str[0] && 7 === str.length && /^#[\\da-fA-F]{6}$/.test(str)) {\r\n    return {\r\n      r: parseInt(str.slice(1, 3), 16),\r\n      g: parseInt(str.slice(3, 5), 16),\r\n      b: parseInt(str.slice(5, 7), 16),\r\n      a: MAX_COLOR_ALPHA\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in valid 3-digit hex format *with* # prefix, returns an RGB color (with alpha 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _hex3(str: string): IRGB | undefined {\r\n  if ('#' === str[0] && 4 === str.length && /^#[\\da-fA-F]{3}$/.test(str)) {\r\n    return {\r\n      r: parseInt(str[1] + str[1], 16),\r\n      g: parseInt(str[2] + str[2], 16),\r\n      b: parseInt(str[3] + str[3], 16),\r\n      a: MAX_COLOR_ALPHA\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * If `str` is in `hsl()` or `hsla()` format, returns an RGB color (alpha defaults to 100).\r\n * Otherwise returns undefined.\r\n */\r\nfunction _hsla(str: string): IRGB | undefined {\r\n  const match = str.match(/^hsl(a?)\\(([\\d., ]+)\\)$/);\r\n  if (match) {\r\n    const hasAlpha = !!match[1];\r\n    const expectedPartCount = hasAlpha ? 4 : 3;\r\n    const parts = match[2].split(/ *, */).map(Number);\r\n\r\n    if (parts.length === expectedPartCount) {\r\n      const rgba = hsl2rgb(parts[0], parts[1], parts[2]);\r\n      rgba.a = hasAlpha ? parts[3] * 100 : MAX_COLOR_ALPHA;\r\n      return rgba;\r\n    }\r\n  }\r\n}\r\n"]}